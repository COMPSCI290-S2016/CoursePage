<!--Programmer: Chris Tralie!-->
<!--Purpose: Front end point chooser for 2D Delaunay Triangulation !-->
<html>
<head>
<script src = "CircumcenterDiscovery.js"></script>
<script src = "gl-matrix-min.js"></script>
<script src = "delaunay.js"></script>
<script src = "util.js"></script>
<body>

<h2>Delaunay Triangulation</h2>

<table>
<tr>
<td>

<button type = "button" onclick = "choosePoints()">Choose Points</button>

<BR><BR>
<button type = "button" onclick = "doDelaunay()">Do Delaunay</button>
<BR><BR>

<table>
<tr><td>Display Circles</td><td>
<input type="checkbox" id="displayCirclesCheckbox" />
</td></tr>

<tr><td>Display Centers</td><td>
<input type="checkbox" id="displayCentersCheckbox" />
</td></tr>
</table>

</td>
<td>
<canvas id = "segcanvas" width = "600" height = "600" style="border:1px solid #000000;">
</canvas>
</td>
</tr>
</table>

<script>
var choosingPoints = true;
var displayCircles = false;
var displayCenters = false;
var canvas = document.getElementById('segcanvas');
var ctx = canvas.getContext("2d"); //For drawing
//Need this to disable that annoying menu that pops up on right click
canvas.addEventListener("contextmenu", function(e){ e.stopPropagation(); e.preventDefault(); return false; }); 

colors = ["#ff0000", "#00ff00", "#0000ff"];
colors2 = ["#ff00ff", "#ffff00", "#00ffff"];

var Ps = []; //Points on the triangle
var Ts = []; //Delaunay triangles (flattened indices into the Ps array)
var Cs = []; //Triangle circumcenters
var Rs = []; //Circumcircle radii

function repaint() {
    var dW = 5;
    var dWSel = 10;
    var W = canvas.width;
    var H = canvas.height;
    ctx.clearRect(0, 0, W, H);
    
    //Draw points
    ctx.fillStyle = "#000000";
    for (var i = 0; i < Ps.length; i++) {
        ctx.fillRect(Ps[i][0]-dW, Ps[i][1]-dW, dW*2+1, dW*2+1);
    }
    
    //Draw DT edges
    ctx.lineWidth = 2;
    var i1, i2;
    for (var i = 0; i < Ts.length/3; i++) {
        for (var k = 0; k < 3; k++) {
            i1 = Ts[i*3+k];
            i2 = Ts[i*3+(k+1)%3];
            ctx.beginPath();
            ctx.moveTo(Ps[i1][0], Ps[i1][1]);
            ctx.lineTo(Ps[i2][0], Ps[i2][1]);
            ctx.stroke();        
        }
    }
    
    if (displayCenters) {
        ctx.fillStyle = "#FF0000";
        for (var i = 0; i < Cs.length; i++) {
            ctx.fillRect(Cs[i][0]-dW, Cs[i][1]-dW, dW*2+1, dW*2+1);
        }
    }
    
    if (displayCircles) {
        console.log("Displaying circles");
        for (var i = 0; i < Cs.length; i++) {
            ctx.beginPath();
            ctx.arc(Cs[i][0], Cs[i][1], Rs[i], 0, 2*Math.PI);
            ctx.stroke();
        }
    }
}

function selectPoint(evt) {
    if (!choosingPoints) {
        return;
    }
    var mousePos = getMousePos(canvas, evt);
    var X = mousePos.X;
    var Y = mousePos.Y;
    var clickType = "LEFT";
    evt.preventDefault();
    if (evt.which) {
        if (evt.which == 3) clickType = "RIGHT";
        if (evt.which == 2) clickType = "MIDDLE";
    }
    else if (evt.button) {
        if (evt.button == 2) clickType = "RIGHT";
        if (evt.button == 4) clickType = "MIDDLE";
    }
    
    if (clickType == "LEFT") {
        //Add a point
        Ps.push([X, Y]);
    }
    else {
        //Remove point
        if (Ps.length > 0) {
            Ps.pop();
        }
    }
    repaint();
}

function calculateCircumcenters() {
    var NTris = Ts.length/3;
    Cs = new Array(NTris);
    Rs = new Array(NTris);
    var res;
    var vs = [null, null, null];
    for (var i = 0; i < NTris; i++) {
        for (var k = 0; k < 3; k++) {
            vs[k] = vec3.fromValues(Ps[Ts[i*3+k]][0], Ps[Ts[i*3+k]][1], 0);
        }
        res = getTriangleCircumcenter(vs[0], vs[1], vs[2]);
        Cs[i] = res.Circumcenter;
        Rs[i] = res.Radius;
    }
}

function choosePoints() {
    choosingPoints = true;
    repaint();
}

function doDelaunay() {
    choosingPoints = false;
    Ts = Delaunay.triangulate(Ps);
    calculateCircumcenters();
    repaint();
}

canvas.addEventListener("mousedown", selectPoint);
canvas.addEventListener("touchstart", selectPoint);
repaint();

var displayCirclesCheckbox = document.getElementById('displayCirclesCheckbox');
displayCirclesCheckbox.addEventListener('change', function(e) {
    displayCircles = displayCirclesCheckbox.checked;
    repaint();
});
displayCirclesCheckbox.checked = false;

var displayCentersCheckbox = document.getElementById('displayCentersCheckbox');
displayCentersCheckbox.addEventListener('change', function(e) {
    displayCenters = displayCentersCheckbox.checked;
    repaint();
});
displayCentersCheckbox.checked = false;

</script>


</body>
</html>
